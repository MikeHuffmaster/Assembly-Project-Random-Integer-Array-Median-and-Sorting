Microsoft (R) Macro Assembler Version 14.36.32535.0	    08/03/23 22:14:29
"Project 5     (Proj5_Huffmasm.asm			     Page 1 - 1


				TITLE Project 5     (Proj5_Huffmasm.asm)

				; Author: Mike Huffmaster
				; Last Modified:8/3/2023
				; OSU email address: Huffmasm@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number:Project 5            Due Date:08/13/2023
				; Description: The user will be introduced to the program. This program will create a list of 200 random 
				;	integers in the range of 15 to 50. The program will then display the median, and the sorted list in ascending order. 
				;	Lastly,the count of each number in the list will be displayed.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 = 0000000F			LO = 15
 = 00000032			HI = 50
 = 000000C8			ARRAYSIZE = 200

 00000000			.data

 00000000 20 20 20 20 20	intro_prompt	BYTE	"                   Array, Median, and Sorted Array         by Mike Huffmaster",13,10,13,10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 41
	   72 72 61 79 2C
	   20 4D 65 64 69
	   61 6E 2C 20 61
	   6E 64 20 53 6F
	   72 74 65 64 20
	   41 72 72 61 79
	   20 20 20 20 20
	   20 20 20 20 62
	   79 20 4D 69 6B
	   65 20 48 75 66
	   66 6D 61 73 74
	   65 72 0D 0A 0D
	   0A
 00000051  54 68 69 73 20					BYTE	"This program is going to create a list of 200 random integers between the range of 15 and 50.",13,10
	   70 72 6F 67 72
	   61 6D 20 69 73
	   20 67 6F 69 6E
	   67 20 74 6F 20
	   63 72 65 61 74
	   65 20 61 20 6C
	   69 73 74 20 6F
	   66 20 32 30 30
	   20 72 61 6E 64
	   6F 6D 20 69 6E
	   74 65 67 65 72
	   73 20 62 65 74
	   77 65 65 6E 20
	   74 68 65 20 72
	   61 6E 67 65 20
	   6F 66 20 31 35
	   20 61 6E 64 20
	   35 30 2E 0D 0A
 000000B0  54 68 65 20 70					BYTE	"The program will then take this list and display the median and the list in ascending order.",13,10
	   72 6F 67 72 61
	   6D 20 77 69 6C
	   6C 20 74 68 65
	   6E 20 74 61 6B
	   65 20 74 68 69
	   73 20 6C 69 73
	   74 20 61 6E 64
	   20 64 69 73 70
	   6C 61 79 20 74
	   68 65 20 6D 65
	   64 69 61 6E 20
	   61 6E 64 20 74
	   68 65 20 6C 69
	   73 74 20 69 6E
	   20 61 73 63 65
	   6E 64 69 6E 67
	   20 6F 72 64 65
	   72 2E 0D 0A
 0000010E  46 69 6E 61 6C					BYTE	"Finally, the total count of each number that occurred will be displayed to the user.",13,10,13,10,0
	   6C 79 2C 20 74
	   68 65 20 74 6F
	   74 61 6C 20 63
	   6F 75 6E 74 20
	   6F 66 20 65 61
	   63 68 20 6E 75
	   6D 62 65 72 20
	   74 68 61 74 20
	   6F 63 63 75 72
	   72 65 64 20 77
	   69 6C 6C 20 62
	   65 20 64 69 73
	   70 6C 61 79 65
	   64 20 74 6F 20
	   74 68 65 20 75
	   73 65 72 2E 0D
	   0A 0D 0A 00
 00000167 54 68 65 20 69	initial_array	BYTE	"The initial array:",13,10,13,10,0
	   6E 69 74 69 61
	   6C 20 61 72 72
	   61 79 3A 0D 0A
	   0D 0A 00
 0000017E 54 68 65 20 73	sorted_array	BYTE	"The sorted array:",13,10,13,10,0
	   6F 72 74 65 64
	   20 61 72 72 61
	   79 3A 0D 0A 0D
	   0A 00
 00000194 54 68 65 20 6D	median			BYTE	"The median is: ",0
	   65 64 69 61 6E
	   20 69 73 3A 20
	   00
 000001A4 54 68 65 20 63	count_prompt	BYTE	"The counts of each number ordered from least to greastest is: ",13,10,13,10,0
	   6F 75 6E 74 73
	   20 6F 66 20 65
	   61 63 68 20 6E
	   75 6D 62 65 72
	   20 6F 72 64 65
	   72 65 64 20 66
	   72 6F 6D 20 6C
	   65 61 73 74 20
	   74 6F 20 67 72
	   65 61 73 74 65
	   73 74 20 69 73
	   3A 20 0D 0A 0D
	   0A 00
 000001E7  000000C8 [		randArray		DWORD	ARRAYSIZE dup(?)
	    00000000
	   ]
 00000507  00000023 [		counts			DWORD	HI-LO dup(0)
	    00000000
	   ]
 00000593 00000000		loop_count		DWORD	?



 00000000			.code
 00000000			main PROC
					
 00000000  E8 00000000 E		call Randomize

 00000005  68 00000000 R		push OFFSET intro_prompt
 0000000A  E8 0000009B			call introduction
					
 0000000F  68 00000593 R		push OFFSET loop_count
 00000014  68 000001E7 R		push OFFSET randArray
 00000019  E8 0000009D			call fillArray

 0000001E  FF 35 00000593 R		push loop_count
 00000024  68 00000167 R		push OFFSET initial_array
 00000029  68 000001E7 R		push OFFSET randArray
 0000002E  E8 000000B9			call displayList
 00000033  E8 00000000 E		call CrLf
					

 00000038  68 000001E7 R		push OFFSET randArray 
 0000003D  E8 000000EF			call sortList

 00000042  68 00000194 R		push OFFSET median
 00000047  68 000001E7 R		push OFFSET randArray
 0000004C  E8 00000118			call displayMedian
 00000051  E8 00000000 E		call CrLf
 00000056  E8 00000000 E		call CrLf

 0000005B  FF 35 00000593 R		push loop_count
 00000061  68 0000017E R		push OFFSET sorted_array
 00000066  68 000001E7 R		push OFFSET randArray
 0000006B  E8 0000007C			call displayList

 00000070  68 00000593 R		push OFFSET loop_count
 00000075  68 00000507 R		push OFFSET counts
 0000007A  68 000001E7 R		push OFFSET randArray
 0000007F  E8 00000171			call countList
 00000084  E8 00000000 E		call CrLf
 00000089  E8 00000000 E		call CrLf

 0000008E  FF 35 00000593 R		push loop_count
 00000094  68 000001A4 R		push OFFSET count_prompt
 00000099  68 00000507 R		push OFFSET counts
 0000009E  E8 00000049			call displayList

					Invoke ExitProcess,0	; exit to operating system
 000000A3  6A 00	   *	    push   +000000000h
 000000A5  E8 00000000 E   *	    call   ExitProcess
 000000AA			main ENDP

				;---------------------------------------------------------------
				;Name: introduction
				;
				;Introduces the program informs the user of the purpose of the program
				;
				;preconditions: none
				;
				;postconditions: EDX changed
				;
				;receives:	global strings
				;
				;returns: None
				;---------------------------------------------------------------
 000000AA			introduction PROC
					
 000000AA  55				push	EBP
 000000AB  8B EC			mov		EBP, ESP
 000000AD  60				pushad

 000000AE  8B 55 08			mov		EDX, [EBP + 8]
 000000B1  E8 00000000 E		call	WriteString
 000000B6  61				popad
 000000B7  5D				pop		EBP

 000000B8  C2 0008			ret		8
 000000BB			introduction ENDP

				;---------------------------------------------------------------
				;Name: fillArray
				;
				;Generates random integers by subtracting the LO constant from the HI constant, getting a random number
				;	in that range, the adding the LO constant back to the random number.  These are then saved in the memory loaction of
				;	randArray
				;
				;preconditions: none
				;
				;postconditions: eax, ecx, esi changed 
				;
				;receives:	address of array and value of count on the stack
				;
				;returns: completed array memory address on stack
				;---------------------------------------------------------------
 000000BB			fillArray PROC
					
 000000BB  55				push	EBP
 000000BC  8B EC			mov		EBP, ESP
 000000BE  8B 5D 0C			mov		EBX, [EBP + 12]
 000000C1  B9 000000C8			mov		ECX, ARRAYSIZE
 000000C6  89 0B			mov		[EBX], ECX			;loops until ARRAYSIZE constant is 0
 000000C8  8B 75 08			mov		ESI, [EBP + 8]			;address of array in esi		
 000000CB  83 F9 00			cmp		ECX, 0
 000000CE  74 18			je		_endLoop

 000000D0				_arrayLoop:
 000000D0  B8 00000032				mov		EAX, HI
 000000D5  40					inc		EAX
 000000D6  83 E8 0F				sub		EAX, LO
 000000D9  E8 00000000 E			call	RandomRange			;generate a random number 
 000000DE  83 C0 0F				add		EAX, LO				;add LO to the number to be within bounds
 000000E1  89 06				mov		[ESI], EAX			;add number to array
 000000E3  83 C6 04				add		ESI, 4
 000000E6  E2 E8				LOOP	_arrayLoop			

 000000E8				_endLoop:
 000000E8  5D					pop	EBP
 000000E9  C2 000C				ret 12
 000000EC			fillArray ENDP

				;---------------------------------------------------------------
				;Name: displayList
				;
				;This procedure displays the array with 20 numbers per line
				;
				;preconditions: none
				;
				;postconditions: 
				;
				;receives:	address of array on system stack
				;
				;returns: None
				;---------------------------------------------------------------

 000000EC			displayList PROC
					
 000000EC  55				push	EBP
 000000ED  8B EC			mov		EBP, ESP
 000000EF  8B 55 0C			mov		EDX, [EBP+12]			;array message
 000000F2  8B 75 08			mov		ESI, [EBP + 8]			;address of array
 000000F5  8B 4D 10			mov		ECX, [EBP+16]		;address of count
 000000F8  BB 00000000			mov		EBX, 0

 000000FD  E8 00000000 E		call	WriteString
 00000102  41				inc		ECX	
 00000103					_displayLoop:
 00000103  83 F9 01					cmp		ECX, 1
 00000106  74 25					je		_break
 00000108  8B 06					mov		EAX, [ESI]			;first element in array
 0000010A  E8 00000000 E				call	WriteDec
 0000010F  B0 20					mov		al, ' '				;spaces between numbers
 00000111  E8 00000000 E				call	WriteChar
 00000116  83 C6 04					add		ESI, TYPE DWORD		;move to next element in array
 00000119  43						inc		EBX					;increment number in that row, once row is at 20, new row
 0000011A  83 FB 14					cmp		EBX, 20
 0000011D  74 02					je		_newRow			
 0000011F  E2 E2					LOOP	_displayLoop

 00000121					_newRow:
 00000121  BB 00000000					mov		EBX, 0
 00000126  E8 00000000 E				call	CrLf
 0000012B  E2 D6					LOOP	_displayLoop

 0000012D				_break:
 0000012D  5D					pop		EBP
 0000012E  C2 000C				ret 12
 00000131			displayList ENDP

				;---------------------------------------------------------------
				;Name: sortList
				;
				;This procedure displays the array with 20 numbers per line
				;
				;preconditions: none
				;
				;postconditions: 
				;
				;receives:	address of array on system stack
				;
				;returns: None
				;---------------------------------------------------------------

 00000131			sortList PROC
 00000131  55				push	EBP
 00000132  8B EC			mov		EBP, ESP
 00000134  B9 000000C8			mov		ECX, ARRAYSIZE
 00000139  49				dec		ECX								;array starts at position '0'
						
 0000013A					_bubblesortL1:
 0000013A  51						push	ECX
 0000013B  8B 75 08					mov		ESI, [EBP + 8]			;pointer to first number in array

 0000013E					_bubblesortL2:
 0000013E  8B 06					mov		EAX, [ESI]				;move start of array in to eax
 00000140  8B 5E 04					mov		EBX, [ESI+4]
 00000143  3B D8					cmp		EBX, EAX				;compare the next item in array to eax
 00000145  7F 07					jg		_bubblesortL3			;if num is less than current eax, swap positions in memory
 00000147  60						pushad
 00000148  E8 0000000D					call	exchangeElements		;move the updated value to the current position 
 0000014D  61						popad

						
 0000014E					_bubblesortL3:
 0000014E  83 C6 04					add		ESI, 4					;move to the next number in the array
 00000151  E2 EB					LOOP	_bubblesortL2			;loop through comparing each number with the current position
 00000153  59						pop		ECX						;restore the outer loop counter
 00000154  E2 E4					LOOP	_bubblesortL1			;loop through each number in the array 
					
					
 00000156  5D				pop	EBP
 00000157  C2 000C			ret 12
 0000015A			sortList ENDP

				;---------------------------------------------------------------
				;Name: exchangeElements
				;
				;This procedure displays the array with 20 numbers per line
				;
				;preconditions: none
				;
				;postconditions: 
				;
				;receives:	address of array on system stack
				;
				;returns: None
				;---------------------------------------------------------------
 0000015A			exchangeElements PROC
 0000015A  55				push	EBP
 0000015B  8B EC			mov		EBP, ESP
 0000015D  8B 06			mov		EAX, [ESI]
 0000015F  8B 5E 04			mov		EBX, [ESI+4]
 00000162  89 46 04			mov		[ESI+4], EAX
 00000165  89 1E			mov		[ESI], EBX
 00000167  5D				pop		EBP
 00000168  C3				ret		
 00000169			exchangeElements ENDP


				;---------------------------------------------------------------
				;Name: displayMedian
				;
				;This procedure displays the array with 20 numbers per line
				;
				;preconditions: none
				;
				;postconditions: 
				;
				;receives:	address of array on system stack
				;
				;returns: None
				;---------------------------------------------------------------

 00000169			displayMedian PROC
 00000169  55				push	EBP
 0000016A  8B EC			mov		EBP, ESP
 0000016C  8B 75 08			mov     ESI, [EBP+8]
 0000016F  60				pushad
 00000170  8B 55 0C			mov		EDX, [EBP + 12]
 00000173  E8 00000000 E		call	WriteString
 00000178  B8 000000C8			mov		EAX, ARRAYSIZE
 0000017D  BA 00000000			mov		EDX, 0
 00000182  BB 00000002			mov		EBX, 2
 00000187  F7 F3			div		EBX
 00000189  83 FA 01			cmp		EDX, 1
 0000018C  74 02			je		_odd
 0000018E  EB 21			jmp		_even

 00000190				_odd:
 00000190  E8 00000000 E			call	CrLf
 00000195  B8 000000C8				mov		EAX, ARRAYSIZE
 0000019A  48					dec		EAX
 0000019B  BA 00000000				mov		EDX, 0
 000001A0  B9 00000002				mov		ECX, 2
 000001A5  F7 F1				div		ECX
 000001A7  8B 04 86				mov		EAX, [ESI + EAX * 4]
 000001AA  E8 00000000 E			call	WriteDec
 000001AF  EB 3F				jmp		_return
						;add one to number and get that element and display that element
						
				   
 000001B1				_even:
						;first get the median location of the array
						
 000001B1  8B D8				mov		EBX, EAX
 000001B3  48					dec		EAX
 000001B4  03 C3				add		EAX, EBX
 000001B6  BA 00000000				mov		EDX, 0
 000001BB  B9 00000002				mov		ECX, 2
 000001C0  F7 F1				div		ECX

						;once median is obtained, mult by 4 to obtain element position in array to obtain the two median numbers
 000001C2  BA 00000004				mov		EDX, 4
 000001C7  F7 E2				mul		EDX
 000001C9  8B 1C 06				mov		EBX, [ESI + EAX]
 000001CC  8B 44 06 04				mov		EAX, [ESI + 4 + EAX]	
					
						
						
						;add both element numbers and divide
 000001D0  03 C3				add		EAX, EBX
 000001D2  BA 00000000				mov		EDX, 0
 000001D7  B9 00000002				mov		ECX, 2
 000001DC  F7 F1				div		ECX
 000001DE  83 FA 01				cmp		EDX, 1
 000001E1  74 07				je		_roundUp
 000001E3  E8 00000000 E			call	WriteDec
 000001E8  EB 06				jmp		_return

 000001EA				_roundUp:
 000001EA  40					inc		EAX
 000001EB  E8 00000000 E			call	WriteDec

 000001F0				_return:
 000001F0  61					popad
 000001F1  5D					pop		EBP
 000001F2  C2 000C				ret		12
 000001F5			displayMedian ENDP

				;---------------------------------------------------------------
				;Name: countList
				;
				;This procedure displays the array with 20 numbers per line
				;
				;preconditions: none
				;
				;postconditions: 
				;
				;receives:	address of array on system stack
				;
				;returns: None
				;---------------------------------------------------------------

 000001F5			countList PROC
					;compare elements in rand array if numbers are equal increment count
					
 000001F5  55				push	EBP
 000001F6  8B EC			mov		EBP, ESP
 000001F8  8B 5D 10			mov		EBX, [EBP + 16]		;reset the array size pointer to new size
 000001FB  B8 00000032			mov		EAX, HI
 00000200  83 E8 0F			sub		EAX, LO
 00000203  89 03			mov		[EBX], EAX
 00000205  8B 75 08			mov		ESI, [EBP + 8]		;randArray
 00000208  8B 1E			mov		EBX, [ESI]
 0000020A  8B 7D 0C			mov		EDI, [EBP + 12]		;countArray
 0000020D  B9 000000C8			mov		ECX, ARRAYSIZE
 00000212  B8 0000000F			mov		EAX, LO
 00000217  BA 00000000			mov		EDX, 0
 0000021C					_count:
 0000021C  83 F9 00					cmp		ECX, 0
 0000021F  74 23					je		_endCount
 00000221  83 FB 32					cmp		EBX, HI
 00000224  7F 1E					jg		_endCount
 00000226  3B D8					cmp		EBX, EAX
 00000228  74 02					je		_incrementCount
 0000022A  75 0A					jne		_incrementList
							
							
 0000022C					_incrementCount:
 0000022C  83 C6 04					add		ESI, 4
 0000022F  8B 1E					mov		EBX, [ESI]
 00000231  42						inc		EDX
 00000232  E2 E8					LOOP	_count
 00000234  EB 0E					jmp		_endCount

 00000236					_incrementList:
 00000236  89 17					mov		DWORD PTR[EDI], EDX
 00000238  BA 00000000					mov		EDX, 0
 0000023D  83 C7 04					add		EDI, 4
 00000240  40						inc		EAX
 00000241  41						inc		ECX
 00000242  E2 D8					LOOP	_count


							

							
					;if numbers are not equal move to the next pair
 00000244			_endCount:
 00000244  5D				pop	EBP
 00000245  C2 000C			ret 12
 00000248			countList ENDP

				END main
Microsoft (R) Macro Assembler Version 14.36.32535.0	    08/03/23 22:14:29
"Project 5     (Proj5_Huffmasm.asm			     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000597 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000248 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
countList  . . . . . . . . . . .	P Near	 000001F5 _TEXT	Length= 00000053 Public STDCALL
  _count . . . . . . . . . . . .	L Near	 0000021C _TEXT	
  _incrementCount  . . . . . . .	L Near	 0000022C _TEXT	
  _incrementList . . . . . . . .	L Near	 00000236 _TEXT	
  _endCount  . . . . . . . . . .	L Near	 00000244 _TEXT	
displayList  . . . . . . . . . .	P Near	 000000EC _TEXT	Length= 00000045 Public STDCALL
  _displayLoop . . . . . . . . .	L Near	 00000103 _TEXT	
  _newRow  . . . . . . . . . . .	L Near	 00000121 _TEXT	
  _break . . . . . . . . . . . .	L Near	 0000012D _TEXT	
displayMedian  . . . . . . . . .	P Near	 00000169 _TEXT	Length= 0000008C Public STDCALL
  _odd . . . . . . . . . . . . .	L Near	 00000190 _TEXT	
  _even  . . . . . . . . . . . .	L Near	 000001B1 _TEXT	
  _roundUp . . . . . . . . . . .	L Near	 000001EA _TEXT	
  _return  . . . . . . . . . . .	L Near	 000001F0 _TEXT	
exchangeElements . . . . . . . .	P Near	 0000015A _TEXT	Length= 0000000F Public STDCALL
fillArray  . . . . . . . . . . .	P Near	 000000BB _TEXT	Length= 00000031 Public STDCALL
  _arrayLoop . . . . . . . . . .	L Near	 000000D0 _TEXT	
  _endLoop . . . . . . . . . . .	L Near	 000000E8 _TEXT	
introduction . . . . . . . . . .	P Near	 000000AA _TEXT	Length= 00000011 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000AA Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
sortList . . . . . . . . . . . .	P Near	 00000131 _TEXT	Length= 00000029 Public STDCALL
  _bubblesortL1  . . . . . . . .	L Near	 0000013A _TEXT	
  _bubblesortL2  . . . . . . . .	L Near	 0000013E _TEXT	
  _bubblesortL3  . . . . . . . .	L Near	 0000014E _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
ARRAYSIZE  . . . . . . . . . . .	Number	 000000C8h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
HI . . . . . . . . . . . . . . .	Number	 00000032h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LO . . . . . . . . . . . . . . .	Number	 0000000Fh   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
count_prompt . . . . . . . . . .	Byte	 000001A4 _DATA	
counts . . . . . . . . . . . . .	DWord	 00000507 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
initial_array  . . . . . . . . .	Byte	 00000167 _DATA	
intro_prompt . . . . . . . . . .	Byte	 00000000 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
loop_count . . . . . . . . . . .	DWord	 00000593 _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
median . . . . . . . . . . . . .	Byte	 00000194 _DATA	
randArray  . . . . . . . . . . .	DWord	 000001E7 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sorted_array . . . . . . . . . .	Byte	 0000017E _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
